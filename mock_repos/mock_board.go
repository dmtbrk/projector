// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/repos/board.go

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/ortymid/projector/models"
	repos "github.com/ortymid/projector/persistence/repos"
	reflect "reflect"
)

// MockBoardRepo is a mock of BoardRepo interface
type MockBoardRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBoardRepoMockRecorder
}

// MockBoardRepoMockRecorder is the mock recorder for MockBoardRepo
type MockBoardRepoMockRecorder struct {
	mock *MockBoardRepo
}

// NewMockBoardRepo creates a new mock instance
func NewMockBoardRepo(ctrl *gomock.Controller) *MockBoardRepo {
	mock := &MockBoardRepo{ctrl: ctrl}
	mock.recorder = &MockBoardRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBoardRepo) EXPECT() *MockBoardRepoMockRecorder {
	return m.recorder
}

// WithTx mocks base method
func (m *MockBoardRepo) WithTx(arg0 context.Context, arg1 repos.Tx, arg2 func(repos.BoardRepo) error) (repos.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(repos.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTx indicates an expected call of WithTx
func (mr *MockBoardRepoMockRecorder) WithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockBoardRepo)(nil).WithTx), arg0, arg1, arg2)
}

// AllByUser mocks base method
func (m *MockBoardRepo) AllByUser(arg0 context.Context, arg1 models.User) ([]models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllByUser", arg0, arg1)
	ret0, _ := ret[0].([]models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllByUser indicates an expected call of AllByUser
func (mr *MockBoardRepoMockRecorder) AllByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByUser", reflect.TypeOf((*MockBoardRepo)(nil).AllByUser), arg0, arg1)
}

// Create mocks base method
func (m *MockBoardRepo) Create(arg0 context.Context, arg1 models.User, arg2 models.Board) (models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBoardRepoMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBoardRepo)(nil).Create), arg0, arg1, arg2)
}
