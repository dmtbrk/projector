// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/repos/comment.go

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/ortymid/projector/models"
	repos "github.com/ortymid/projector/persistence/repos"
	reflect "reflect"
)

// MockCommentRepo is a mock of CommentRepo interface
type MockCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepoMockRecorder
}

// MockCommentRepoMockRecorder is the mock recorder for MockCommentRepo
type MockCommentRepoMockRecorder struct {
	mock *MockCommentRepo
}

// NewMockCommentRepo creates a new mock instance
func NewMockCommentRepo(ctrl *gomock.Controller) *MockCommentRepo {
	mock := &MockCommentRepo{ctrl: ctrl}
	mock.recorder = &MockCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentRepo) EXPECT() *MockCommentRepoMockRecorder {
	return m.recorder
}

// WithTx mocks base method
func (m *MockCommentRepo) WithTx(arg0 context.Context, arg1 repos.Tx, arg2 func(repos.CommentRepo) error) (repos.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(repos.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTx indicates an expected call of WithTx
func (mr *MockCommentRepoMockRecorder) WithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCommentRepo)(nil).WithTx), arg0, arg1, arg2)
}

// AllByTask mocks base method
func (m *MockCommentRepo) AllByTask(arg0 context.Context, arg1 models.Task) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllByTask", arg0, arg1)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllByTask indicates an expected call of AllByTask
func (mr *MockCommentRepoMockRecorder) AllByTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByTask", reflect.TypeOf((*MockCommentRepo)(nil).AllByTask), arg0, arg1)
}

// Create mocks base method
func (m *MockCommentRepo) Create(arg0 context.Context, arg1 models.Task, arg2 models.Comment) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCommentRepoMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentRepo)(nil).Create), arg0, arg1, arg2)
}
