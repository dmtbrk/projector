// Code generated by MockGen. DO NOT EDIT.
// Source: persistence/repos/task.go

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/ortymid/projector/models"
	repos "github.com/ortymid/projector/persistence/repos"
	reflect "reflect"
)

// MockTaskRepo is a mock of TaskRepo interface
type MockTaskRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepoMockRecorder
}

// MockTaskRepoMockRecorder is the mock recorder for MockTaskRepo
type MockTaskRepoMockRecorder struct {
	mock *MockTaskRepo
}

// NewMockTaskRepo creates a new mock instance
func NewMockTaskRepo(ctrl *gomock.Controller) *MockTaskRepo {
	mock := &MockTaskRepo{ctrl: ctrl}
	mock.recorder = &MockTaskRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskRepo) EXPECT() *MockTaskRepoMockRecorder {
	return m.recorder
}

// WithTx mocks base method
func (m *MockTaskRepo) WithTx(arg0 context.Context, arg1 repos.Tx, arg2 func(repos.TaskRepo) error) (repos.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(repos.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTx indicates an expected call of WithTx
func (mr *MockTaskRepoMockRecorder) WithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockTaskRepo)(nil).WithTx), arg0, arg1, arg2)
}

// AllByColumn mocks base method
func (m *MockTaskRepo) AllByColumn(arg0 context.Context, arg1 models.Column) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllByColumn", arg0, arg1)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllByColumn indicates an expected call of AllByColumn
func (mr *MockTaskRepoMockRecorder) AllByColumn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByColumn", reflect.TypeOf((*MockTaskRepo)(nil).AllByColumn), arg0, arg1)
}

// AllByBoard mocks base method
func (m *MockTaskRepo) AllByBoard(arg0 context.Context, arg1 models.Board) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllByBoard", arg0, arg1)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllByBoard indicates an expected call of AllByBoard
func (mr *MockTaskRepoMockRecorder) AllByBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByBoard", reflect.TypeOf((*MockTaskRepo)(nil).AllByBoard), arg0, arg1)
}

// Create mocks base method
func (m *MockTaskRepo) Create(arg0 context.Context, arg1 models.Column, arg2 models.Task) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTaskRepoMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepo)(nil).Create), arg0, arg1, arg2)
}
